{"ast":null,"code":"// apis/authApi.ts\n\nconst apiUrl = '/api'; // Update with your actual API URL\n\nexport const signIn = async signInData => {\n  try {\n    const response = await fetch(`${apiUrl}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signInData)\n    });\n    return response;\n  } catch (error) {\n    throw new Error(`Error during sign in: ${error.message}`);\n  }\n};\nexport const register = async registerData => {\n  try {\n    const response = await fetch(`${apiUrl}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    return response;\n  } catch (error) {\n    throw new Error(`Error during registration: ${error.message}`);\n  }\n};","map":{"version":3,"names":["apiUrl","signIn","signInData","response","fetch","method","headers","body","JSON","stringify","error","Error","message","register","registerData"],"sources":["/Users/kimminjune/startup_project/WhiskyPedia/front/src/apis/Authorisation.ts"],"sourcesContent":["// apis/authApi.ts\n\ninterface SignInData {\n    email: string;\n    password: string;\n  }\n  \n  interface RegisterData {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n  }\n  \n  const apiUrl = '/api'; // Update with your actual API URL\n  \n  export const signIn = async (signInData: SignInData): Promise<Response> => {\n    try {\n      const response = await fetch(`${apiUrl}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(signInData),\n      });\n      return response;\n    } catch (error) {\n      throw new Error(`Error during sign in: ${error.message}`);\n    }\n  };\n  \n  export const register = async (registerData: RegisterData): Promise<Response> => {\n    try {\n      const response = await fetch(`${apiUrl}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(registerData),\n      });\n      return response;\n    } catch (error) {\n      throw new Error(`Error during registration: ${error.message}`);\n    }\n  };"],"mappings":"AAAA;;AAcE,MAAMA,MAAM,GAAG,MAAM,CAAC,CAAC;;AAEvB,OAAO,MAAMC,MAAM,GAAG,MAAOC,UAAsB,IAAwB;EACzE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,QAAO,EAAE;MAC9CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,UAAU;IACjC,CAAC,CAAC;IACF,OAAOC,QAAQ;EACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,yBAAwBD,KAAK,CAACE,OAAQ,EAAC,CAAC;EAC3D;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOC,YAA0B,IAAwB;EAC/E,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,WAAU,EAAE;MACjDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,YAAY;IACnC,CAAC,CAAC;IACF,OAAOX,QAAQ;EACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,8BAA6BD,KAAK,CAACE,OAAQ,EAAC,CAAC;EAChE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}