{"ast":null,"code":"const apiUrl = 'http://localhost:8080/api/auth'; // Update with your actual API URL\n\nexport const signIn = async signInData => {\n  try {\n    const response = await fetch(`${apiUrl}/signIn`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signInData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to sign in');\n    }\n    const data = await response.json();\n    localStorage.setItem('token', data.token);\n    return response;\n  } catch (error) {\n    // Explicitly specify 'any' type for error\n    console.error('Error during sign in:', error.message);\n    throw error; // Rethrow the error to propagate it further\n  }\n};\nexport const register = async registerData => {\n  try {\n    const response = await fetch(`${apiUrl}/signUp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to register');\n    }\n    return response;\n  } catch (error) {\n    // Explicitly specify 'any' type for error\n    console.error('Error during registration:', error.message);\n    throw error; // Rethrow the error to propagate it further\n  }\n};\nexport const getUserProfile = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('No token found');\n  }\n  try {\n    const response = await fetch(`${apiUrl}/profile`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching user profile:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","signIn","signInData","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","error","console","message","register","registerData","getUserProfile","getItem"],"sources":["/Users/kimminjune/startup_project/WhiskyPedia/front/src/apis/Authorisation.ts"],"sourcesContent":["interface SignInData {\n  userEmail: string;\n  userPassword: string;\n}\n\ninterface RegisterData {\n  userEmail: string;\n  userName: string;\n  userPassword: string;\n  userPwConfirm: string;\n}\n\ninterface UserProfileData {\n  userEmail: string;\n  userName: string;\n}\n\nconst apiUrl = 'http://localhost:8080/api/auth'; // Update with your actual API URL\n\nexport const signIn = async (signInData: SignInData): Promise<Response> => {\n  try {\n    const response = await fetch(`${apiUrl}/signIn`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(signInData),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to sign in');\n    }\n\n    const data = await response.json();\n    localStorage.setItem('token', data.token);\n    return response;\n  } catch (error: any) { // Explicitly specify 'any' type for error\n    console.error('Error during sign in:', error.message);\n    throw error; // Rethrow the error to propagate it further\n  }\n};\n\nexport const register = async (registerData: RegisterData): Promise<Response> => {\n  try {\n    const response = await fetch(`${apiUrl}/signUp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(registerData),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to register');\n    }\n\n    return response;\n  } catch (error: any) { // Explicitly specify 'any' type for error\n    console.error('Error during registration:', error.message);\n    throw error; // Rethrow the error to propagate it further\n  }\n};\n\nexport const getUserProfile = async (): Promise<UserProfileData> => {\n  const token = localStorage.getItem('token');\n\n  if (!token) {\n    throw new Error('No token found');\n  }\n\n  try {\n    const response = await fetch(`${apiUrl}/profile`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n\n    const data: UserProfileData = await response.json();\n    return data;\n  } catch (error: any) {\n    console.error('Error fetching user profile:', error.message);\n    throw error;\n  }\n};"],"mappings":"AAiBA,MAAMA,MAAM,GAAG,gCAAgC,CAAC,CAAC;;AAEjD,OAAO,MAAMC,MAAM,GAAG,MAAOC,UAAsB,IAAwB;EACzE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,SAAQ,EAAE;MAC/CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,UAAU;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACtC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;IACzC,OAAOb,QAAQ;EACjB,CAAC,CAAC,OAAOc,KAAU,EAAE;IAAE;IACrBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACrD,MAAMF,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAG,MAAOC,YAA0B,IAAwB;EAC/E,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,SAAQ,EAAE;MAC/CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,YAAY;IACnC,CAAC,CAAC;IAEF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,OAAOR,QAAQ;EACjB,CAAC,CAAC,OAAOc,KAAU,EAAE;IAAE;IACrBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D,MAAMF,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAsC;EAClE,MAAMN,KAAK,GAAGF,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACP,KAAK,EAAE;IACV,MAAM,IAAIL,KAAK,CAAC,gBAAgB,CAAC;EACnC;EAEA,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,UAAS,EAAE;MAChDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAG,UAASU,KAAM,EAAC;QAClC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,MAAMC,IAAqB,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnD,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOK,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}